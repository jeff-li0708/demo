集合
List
1.ArrayList与LinkedList
ArrayList是一个数组,初始大小为10,每次按原大小的1/2扩容,多用于数据的读取
LinkedList是一个双向链表,多用于数据的修改

Vector类似于ArrayList,内部是一个数组,只是它的很多实现方法都加了synchronized关键字,实现了同步,因此是线程安全的

Map
1.HashMap数据结构、hash冲突如何解决、扩容机制、扩容时如何避免rehash的优化
数组+链表、红黑树。通过链条解决hash冲突，当链表的长度大于8时转为红黑树.
数组的默认大小是16,默认加载因子是0.75,当map的大小超过原数组大小*加载因子,数组的大小扩大一倍(创建一个新数组,将原数组里的数据重新计算下标后放入新数组).

2.LinkHashMap的基本原理、哪两种有序、如何利用他实现LRU
在HashMap的基础上多了个双向链表
LinkHashMap的链表有两种有序accessOrder为true的话，LinkHashMap中的顺序是最近一次获取的节点放在链表的尾部。accessOrder为false的话，LinkHashMap中的顺序跟插入顺序一样
利用他实现LRU,继承LinkedHashMap,设置LinkedHashMap的属性accessOrder为true并重写removeEldestEntry方法的逻辑

3.TreeMap的数据结构、key对象为什么必须要实现Compare接口、如何利用它实现一致性哈希
红黑树。默认为升序排列方式,左节点<父节点<右节点
put时会比较key
可以利用TreeMap实现一致性Hash算法,1.获取大于hash的节点集合SortedMap<Long,String> last = map.tailMap(hash),2.获取最近的一个节点last.get(last.firstKey());
从JDK7到JDK8有什么改动：JDK7中是数组+链表,JDK8中对链表部分进行了改进,当链表的长度大于8时转为红黑树

4.ConcurrentHashMap的原理
数据结构上JDK7中是Segment[]+HashEntry[] + 链表,采用了分段锁技术
JDK8去掉了Segment,采用了 CAS + synchronized 来保证并发安全性。

5.HashTable
与HashMap结构类似,只是它的很多实现方法都增加了synchronized关键字,实现了同步,因此是线程安全的

-------------------------------------------
Redis
1.Redis为什么是单线程的？
因为CPU不是Redis的瓶颈。Redis的瓶颈最有可能是机器内存或者网络带宽.redis利用队列技术将并发访问变为串行访问，消除了传统数据库串行控制的开销

2.Redis快速的原因？
总体来说快速的原因如下：
1）绝大部分请求是纯粹的内存操作（非常快速）
2）采用单线程,避免了不必要的上下文切换和竞争条件
3）非阻塞IO
内部实现采用epoll，采用了epoll+自己实现的简单的事件框架。epoll中的读、写、关闭、连接都转化成了事件，然后利用epoll的多路复用特性，绝不在io上浪费一点时间

3.单线程的redis如何利用多核cpu机器？
创建多个实例

4.redis如何持久化数据？
RDB、AOF
RDB通过conf文件save n m,指定的时间间隔内将内存中的数据集快照写入磁盘，对于灾难恢复而言，RDB是非常不错的选择，但是会有一定的数据丢失
AOF以日志的形式记录服务器所处理的每一个写操作,


5. redis常见性能问题和解决方案：
(1) Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件
(Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照;AOF文件过大会影响Master重启的恢复速度)
(2) 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次
(3) 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内
(4) 尽量避免在压力很大的主库上增加从库
(5) 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master <- Slave1 <- Slave2 <- Slave3...
这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。

6.Redis的回收策略
volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰
volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰
volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰
allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰
allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰
no-enviction（驱逐）：禁止驱逐数据

注意这里的6种机制，volatile和allkeys规定了是对已设置过期时间的数据集淘汰数据还是从全部数据集淘汰数据，后面的lru、ttl以及random是三种不同的淘汰策略，再加上一种no-enviction永不回收的策略。
　　使用策略规则：
　　1、如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用allkeys-lru
　　2、如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用allkeys-random

7.缓存穿透、击穿、雪崩
穿透：缓存和数据库中都不存在,但是请求每次都会打到数据库上面去
解决：将这些key对应的值设置为null放到缓存中。或者使用BloomFilter来判断某个key是否在某个集合中
击穿：当某个key刚好失效，造成大量的请求打到数据库上面去
解决：加锁，让获得锁的线程做缓存
雪崩：比如缓存服务器宕机
解决：事前-使用集群缓存，保证缓存服务的高可用。事中-本地缓存+Hystrix限流

8.如何用redis实现分布式锁?
nx和px命令

------------------NIO-------------------
Java NIO的核心部分组成：Channals、Buffers、Selectors

关键的Channal
FileChannel
DatagramChannel
SocketChannel
ServerSocketChannel

关键的Buffer
ByteBuffer
CharBuffer
DoubleBuffer
FloatBuffer
IntBuffer
LongBuffer
ShortBuffer